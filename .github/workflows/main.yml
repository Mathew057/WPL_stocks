name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

jobs:
  server:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v1

      - name: Build image
        run: |
          cd server
          docker build . --file Dockerfile --tag server

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/server

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag server $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  # client:
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #
  #   steps:
  #     - uses: actions/checkout@v1
  #
  #     - name: Build image
  #       run: |
  #         cd client
  #         docker build . --file Dockerfile --tag client
  #
  #     - name: Log into registry
  #       run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
  #
  #     - name: Push image
  #       run: |
  #         IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/client
  #
  #         # Strip git ref prefix from version
  #         VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #
  #         # Strip "v" prefix from tag name
  #         [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #
  #         # Use Docker `latest` tag convention
  #         [ "$VERSION" == "master" ] && VERSION=latest
  #
  #         echo IMAGE_ID=$IMAGE_ID
  #         echo VERSION=$VERSION
  #
  #         docker tag image $IMAGE_ID:$VERSION
  #         docker push $IMAGE_ID:$VERSION
